#!/bin/bash

################################################################################
# GHC

shouldInstallGhc() {
  if [ ! -d "$HOME"/.ghc-switch/ghc-"$GHCVER" ]; then
    return 0;
  else
    return 1;
  fi
}

# Download and build a GHC tarball from download.haskell.org into ~/.ghc-switch.
installGhc() {
  echo -n "ghc-$GHCVER: downloading... "
  wget https://downloads.haskell.org/~ghc/"$GHCVER"/"$GHCTARBALL" >>"$GHCLOG" 2>&1
  echo -en "\033[15Dunpacking...  \033[1D"
  tar xf "$GHCTARBALL" >>"$GHCLOG" 2>&1
  cd ghc-"$GHCVER"
  echo -en "\033[13Dconfiguring... "
  ./configure --prefix="$HOME"/.ghc-switch/ghc-"$GHCVER" >>"$GHCLOG" 2>&1
  echo -en "\033[15Dcompiling...  \033[1D"
  ./configure --prefix="$HOME"/.ghc-switch/ghc-"$GHCVER" >>"$GHCLOG" 2>&1
  make install >>"$GHCLOG" 2>&1
  echo -e "\033[13Dinstalled to $HOME/.ghc-switch/ghc-$GHCVER"
  cd ..
}

################################################################################
# cabal-install

shouldInstallCabal() {
  if [ ! -f "$HOME"/.ghc-switch/cabal-"$CABALMVER" ]; then
    return 0;
  else
    return 1;
  fi
}

# Download and build a cabal-install tarball from hackage.haskell.org; copy
# binary to ~/.ghc-switch.
installCabal() {
  GHC_BIN="$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/ghc
  GHC_PKG_BIN="$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/ghc-pkg
  HADDOCK_BIN="$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/haddock

  echo -n "cabal-$CABALMVER: downloading... "
  wget https://hackage.haskell.org/package/cabal-install-"$CABALVER"/cabal-install-"$CABALVER".tar.gz >>"$CABALLOG" 2>&1
  echo -en "\033[15Dunpacking...  \033[1D"
  tar xf cabal-install-"$CABALVER".tar.gz >>"$CABALLOG" 2>&1
  cd cabal-install-"$CABALVER"
  (
    export EXTRA_CONFIGURE_OPTS="";
    export GHC="$GHC_BIN";
    export GHC_PKG="$GHC_PKG_BIN";
    export HADDOCK="$HADDOCK_BIN";
    echo -en "\033[13Dcompiling... "
    ./bootstrap.sh -j --sandbox >>"$CABALLOG" 2>&1
  )
  mv .cabal-sandbox/bin/cabal "$HOME"/.ghc-switch/cabal-"$CABALMVER"
  echo -e "\033[13Dinstalled to $HOME/.ghc-switch/cabal-$CABALMVER"
  cd ..
}

################################################################################
# Main

function printUsage() {
  echo "Usage: ghc-switch VERSION"
  echo ""
  echo "ghc-switch switches between versions of ghc, its friends, and cabal-install"
  echo "(its acquaintance). Build artifacts are located in ~/.ghc-switch, and "
  echo "binaries are symlinked in ~/.local/bin, which should be on your PATH."
}

if [ -z "$1" ]; then
  printUsage
  exit 1
fi

if [ "$1" == "--help" ]; then
  printUsage
  exit 0
fi

command -v dialog >/dev/null || { echo >&2 "dialog not found"; exit 1; }
command -v ln     >/dev/null || { echo >&2 "ln not found";     exit 1; }
command -v make   >/dev/null || { echo >&2 "make not found";   exit 1; }
command -v tar    >/dev/null || { echo >&2 "tar not found";    exit 1; }
command -v wget   >/dev/null || { echo >&2 "wget not found";   exit 1; }

GHCVER=$1

case "$GHCVER" in
  "8.2.2")
    CABALVER="2.0.0.1"
    CABALMVER="2.0.1"
    ;;
  "8.2.1")
    CABALVER="2.0.0.0"
    CABALMVER="2.0.0"
    ;;
  "8.0.2")
    CABALVER="1.24.0.2"
    CABALMVER="1.24.2"
    ;;
  *)
    echo "$GHCVER âˆ‰ {8.0.2, 8.2.1, 8.2.2}"
    exit 1
    ;;
esac

GHCLOG=$HOME/.ghc-switch/ghc-$GHCVER.log
CABALLOG=$HOME/.ghc-switch/cabal-$CABALMVER.log

if shouldInstallGhc; then
  case "$GHCVER" in
    "8.2.2")
      OPTIONS=(
        "ghc-8.2.2-aarch64-deb8-linux.tar.xz" ""
        "ghc-8.2.2-armv7-deb8-linux.tar.xz" ""
        "ghc-8.2.2-i386-deb7-linux.tar.xz" ""
        "ghc-8.2.2-i386-deb8-linux.tar.xz" ""
        "ghc-8.2.2-i386-unknown-mingw32.tar.xz" ""
        "ghc-8.2.2-powerpc-ibm-aix7.1.0.0.tar.xz" ""
        "ghc-8.2.2-src.tar.xz" ""
        "ghc-8.2.2-windows-extra-src.tar.xz" ""
        "ghc-8.2.2-x86_64-apple-darwin.tar.xz" ""
        "ghc-8.2.2-x86_64-centos67-linux.tar.xz" ""
        "ghc-8.2.2-x86_64-deb7-linux.tar.xz" ""
        "ghc-8.2.2-x86_64-deb8-linux-dwarf.tar.xz" ""
        "ghc-8.2.2-x86_64-deb8-linux.tar.xz" ""
        "ghc-8.2.2-x86_64-portbld10_3-freebsd.tar.xz" ""
        "ghc-8.2.2-x86_64-portbld11-freebsd.tar.xz" ""
        "ghc-8.2.2-x86_64-unknown-linux.tar.xz" ""
        "ghc-8.2.2-x86_64-unknown-mingw32.tar.xz" ""
      )
      GHCTARBALL=$(dialog --stdout --menu "Download GHC bindist" 0 0 17 "${OPTIONS[@]}")
      if [ $? -ne 0 ]; then
        clear
        exit 0
      fi
      clear
      ;;
    "8.2.1")
      OPTIONS=(
        "ghc-8.2.1-aarch64-deb8-linux.tar.xz" ""
        "ghc-8.2.1-armv7-deb8-linux.tar.xz" ""
        "ghc-8.2.1-i386-deb7-linux.tar.xz" ""
        "ghc-8.2.1-i386-deb8-linux.tar.xz" ""
        "ghc-8.2.1-i386-unknown-mingw32.tar.xz" ""
        "ghc-8.2.1-src.tar.xz" ""
        "ghc-8.2.1-windows-extra-src.tar.xz" ""
        "ghc-8.2.1-x86_64-apple-darwin.tar.xz" ""
        "ghc-8.2.1-x86_64-centos67-linux.tar.xz" ""
        "ghc-8.2.1-x86_64-deb7-linux.tar.xz" ""
        "ghc-8.2.1-x86_64-deb8-linux-dwarf.tar.xz" ""
        "ghc-8.2.1-x86_64-deb8-linux.tar.xz" ""
        "ghc-8.2.1-x86_64-openbsd60-openbsd.tar.xz" ""
        "ghc-8.2.1-x86_64-openbsd61-openbsd.tar.xz" ""
        "ghc-8.2.1-x86_64-portbld10_3-freebsd.tar.xz" ""
        "ghc-8.2.1-x86_64-portbld11-freebsd.tar.xz" ""
        "ghc-8.2.1-x86_64-unknown-mingw32.tar.xz" ""
      )
      GHCTARBALL=$(dialog --stdout --menu "Download GHC bindist" 0 0 17 "${OPTIONS[@]}")
      if [ $? -ne 0 ]; then
        clear
        exit 0
      fi
      clear
      ;;
    "8.0.2")
      OPTIONS=(
        "ghc-8.0.2-armv7-deb8-linux.tar.xz" ""
        "ghc-8.0.2-i386-centos67-linux.tar.xz" ""
        "ghc-8.0.2-i386-deb7-linux.tar.xz" ""
        "ghc-8.0.2-i386-deb8-linux.tar.xz" ""
        "ghc-8.0.2-i386-portbld-freebsd.tar.xz" ""
        "ghc-8.0.2-i386-unknown-mingw32-win10.tar.xz" ""
        "ghc-8.0.2-i386-unknown-mingw32.tar.xz" ""
        "ghc-8.0.2-i386-unknown-solaris2.tar.xz" ""
        "ghc-8.0.2-powerpc-ibm-aix7.1.0.0.tar.xz" ""
        "ghc-8.0.2-src.tar.xz" ""
        "ghc-8.0.2-windows-extra-src.tar.xz" ""
        "ghc-8.0.2-x86_64-apple-darwin.tar.xz" ""
        "ghc-8.0.2-x86_64-centos67-linux.tar.xz" ""
        "ghc-8.0.2-x86_64-deb7-linux.tar.xz" ""
        "ghc-8.0.2-x86_64-deb8-linux.tar.xz" ""
        "ghc-8.0.2-x86_64-portbld-freebsd.tar.xz" ""
        "ghc-8.0.2-x86_64-unknown-mingw32-win10.tar.xz" ""
        "ghc-8.0.2-x86_64-unknown-mingw32.tar.xz" ""
        "ghc-8.0.2-x86_64-unknown-openbsd.tar.xz" ""
      )
      GHCTARBALL=$(dialog --stdout --menu "Download GHC bindist" 0 0 19 "${OPTIONS[@]}")
      if [ $? -ne 0 ]; then
        clear
        exit 0
      fi
      clear
      ;;
    *)
      exit 1
      ;;
  esac
fi

set -e

if shouldInstallGhc || shouldInstallCabal; then
  TEMPDIR=$(mktemp -d)
  cd "$TEMPDIR"

  # Register an EXIT handler informing the user where we downloaded temporary
  # files. Don't rm -rf on their behalf, ain't nobody want a lawsuit.
  function cleanup {
    case "$INSTALLING" in
      "GHC")
        echo ""
        echo "Blarg, I am ded. Please check the log: $GHCLOG"
        ;;
      "CABAL")
        echo ""
        echo "Blarg, I am ded. Please check the log: $CABALLOG"
        rm -f "$GHCLOG"
        ;;
      *)
        rm -f "$GHCLOG"
        rm -f "$CABALLOG"
        rm -rf -I "$TEMPDIR"
        ;;
    esac
  }
  trap cleanup EXIT

  if shouldInstallGhc; then
    INSTALLING="GHC"
    installGhc
  fi

  if shouldInstallCabal; then
    INSTALLING="CABAL"
    installCabal
  fi

  INSTALLING=""
fi

ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/ghc-"$GHCVER" "$HOME"/.local/bin/ghc
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/ghci-"$GHCVER" "$HOME"/.local/bin/ghci
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/ghc-pkg-"$GHCVER" "$HOME"/.local/bin/ghc-pkg
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/haddock-ghc-"$GHCVER" "$HOME"/.local/bin/haddock
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/hp2ps "$HOME"/.local/bin/hp2ps
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/hpc "$HOME"/.local/bin/hpc
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/hsc2hs "$HOME"/.local/bin/hsc2hs
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/runghc-"$GHCVER" "$HOME"/.local/bin/runghc
ln -s -f "$HOME"/.ghc-switch/ghc-"$GHCVER"/bin/runghc-"$GHCVER" "$HOME"/.local/bin/runhaskell
ln -s -f "$HOME"/.ghc-switch/cabal-"$CABALMVER" "$HOME"/.local/bin/cabal
